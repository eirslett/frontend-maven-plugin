package com.github.eirslett.maven.plugins.frontend.lib;

import com.diffblue.deeptestutils.Reflector;
import com.github.eirslett.maven.plugins.frontend.lib.ProxyConfig;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class DefaultNpmRunnerTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: NpmRunner */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 20 branch to line 20
   *  - conditional line 20 branch to line 24
   *  - conditional line 24 branch to line 42
   */

  @Test
  public void buildArgumentsInputNotNullNotNullOutput0()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    ProxyConfig proxyConfig = ((ProxyConfig)Reflector.getInstance(
        "com.github.eirslett.maven.plugins.frontend.lib.ProxyConfig"));
    ArrayList arrayList = new ArrayList();
    Reflector.setField(proxyConfig, "proxies", arrayList);
    String npmRegistryURL = "";

    // Act
    Class<?> classUnderTest =
        Reflector.forName("com.github.eirslett.maven.plugins.frontend.lib.DefaultNpmRunner");
    Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "buildArguments",
        Reflector.forName("com.github.eirslett.maven.plugins.frontend.lib.ProxyConfig"),
        Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    List<String> retval = (List<String>)methodUnderTest.invoke(null, proxyConfig, npmRegistryURL);

    // Assert result
    ArrayList<String> arrayList1 = new ArrayList<String>();
    Assert.assertEquals(arrayList1, retval);
  }

  /* testedClasses: NpmRunner */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 20 branch to line 20
   *  - conditional line 20 branch to line 21
   *  - conditional line 21 branch to line 21
   *  - conditional line 24 branch to line 42
   */

  @Test
  public void buildArgumentsInputNotNullNotNullOutput1()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    ProxyConfig proxyConfig = ((ProxyConfig)Reflector.getInstance(
        "com.github.eirslett.maven.plugins.frontend.lib.ProxyConfig"));
    ArrayList arrayList = new ArrayList();
    Reflector.setField(proxyConfig, "proxies", arrayList);
    String npmRegistryURL = "\"\"";

    // Act
    Class<?> classUnderTest =
        Reflector.forName("com.github.eirslett.maven.plugins.frontend.lib.DefaultNpmRunner");
    Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "buildArguments",
        Reflector.forName("com.github.eirslett.maven.plugins.frontend.lib.ProxyConfig"),
        Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    List<String> retval = (List<String>)methodUnderTest.invoke(null, proxyConfig, npmRegistryURL);

    // Assert result
    ArrayList<String> arrayList1 = new ArrayList<String>();
    arrayList1.add("--registry=\"\"");
    Assert.assertEquals(arrayList1, retval);
  }
}
