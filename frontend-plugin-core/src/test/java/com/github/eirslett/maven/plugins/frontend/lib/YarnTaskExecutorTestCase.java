package com.github.eirslett.maven.plugins.frontend.lib;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class YarnTaskExecutorTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: YarnTaskExecutor */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 87 branch to line 87
   *  - conditional line 87 branch to line 88
   *  - conditional line 88 branch to line 88
   *  - conditional line 91 branch to line 91
   *  - conditional line 91 branch to line 92
   *  - conditional line 94 branch to line 94
   *  - conditional line 95 branch to line 111
   */

  @Test
  public void maskPasswordInputNotNullOutputNotNull2()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    String proxyString = "@///Bhhhttp:   ";

    // Act
    Class<?> classUnderTest =
        Reflector.forName("com.github.eirslett.maven.plugins.frontend.lib.YarnTaskExecutor");
    Method methodUnderTest =
        classUnderTest.getDeclaredMethod("maskPassword", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    String retval = (String)methodUnderTest.invoke(null, proxyString);

    // Assert result
    Assert.assertEquals("@///Bhhhttp:   ", retval);
  }

  /* testedClasses: YarnTaskExecutor */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 87 branch to line 87
   *  - conditional line 87 branch to line 111
   */

  @Test
  public void maskPasswordInputNotNullOutputNotNull()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    String proxyString = "";

    // Act
    Class<?> classUnderTest =
        Reflector.forName("com.github.eirslett.maven.plugins.frontend.lib.YarnTaskExecutor");
    Method methodUnderTest =
        classUnderTest.getDeclaredMethod("maskPassword", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    String retval = (String)methodUnderTest.invoke(null, proxyString);

    // Assert result
    Assert.assertEquals("", retval);
  }
}
